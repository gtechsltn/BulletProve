<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LTest.Common</name>
    </assembly>
    <members>
        <member name="T:LTest.Attributes.DefaultTestServerAttribute">
            <summary>
            Default test server.
            </summary>
        </member>
        <member name="T:LTest.TestServerAttribute">
            <summary>
            Test server attribute.
            </summary>
        </member>
        <member name="M:LTest.TestServerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.TestServerAttribute"/> class.
            </summary>
            <param name="testServerType">Test server type.</param>
        </member>
        <member name="P:LTest.TestServerAttribute.TestServerType">
            <summary>
            Test server type.
            </summary>
        </member>
        <member name="T:LTest.Behaviors.CleanSingletonsBeforeTestBehavior">
            <summary>
            Clean before test behavior.
            </summary>
        </member>
        <member name="M:LTest.Behaviors.CleanSingletonsBeforeTestBehavior.#ctor(System.Collections.Generic.IEnumerable{LTest.Interfaces.ICleanSingletonBeforeTest})">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.Behaviors.CleanSingletonsBeforeTestBehavior"/> class.
            </summary>
            <param name="services">Services.</param>
        </member>
        <member name="M:LTest.Behaviors.CleanSingletonsBeforeTestBehavior.RunAsync">
            <summary>
            Behavior logic.
            </summary>
        </member>
        <member name="T:LTest.Configuration.IntegrationTestConfiguration">
            <summary>
            Configuration for an integration test.
            </summary>
        </member>
        <member name="P:LTest.Configuration.IntegrationTestConfiguration.MinimumLogLevel">
            <summary>
            Minimum log level to check for LogSniffer.
            </summary>
        </member>
        <member name="P:LTest.Configuration.IntegrationTestConfiguration.PreserveLoggerProviders">
            <summary>
            Turns off default LogSniffer registration and preserves the logger providers.
            </summary>
        </member>
        <member name="P:LTest.Configuration.IntegrationTestConfiguration.DefaultIsExpectedLogSnifferEventAction">
            <summary>
            Decide whether a log sniffer event is expected or the test should fail.
            </summary>
        </member>
        <member name="P:LTest.Configuration.IntegrationTestConfiguration.ConfigurationFiles">
            <summary>
            Configuration files to merge.
            </summary>
        </member>
        <member name="P:LTest.Configuration.IntegrationTestConfiguration.LogLoggerCategoryNames">
            <summary>
            Whether to log logger category names at the end of the test. Useful for setting up the <see cref="P:LTest.Configuration.IntegrationTestConfiguration.ServerLogFilter"/>.
            </summary>
        </member>
        <member name="P:LTest.Configuration.IntegrationTestConfiguration.ServerLogFilter">
            <summary>
            Logger filter.
            </summary>
        </member>
        <member name="T:LTest.ExtensionMethods.StringExtensionMethods">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:LTest.ExtensionMethods.StringExtensionMethods.TrimEnd(System.String,System.String,System.StringComparison)">
            <summary>
            If a string ends with the specified value then removes it.
            </summary>
            <param name="input">The string that should be trimmed.</param>
            <param name="suffixToRemove">String that should be removed.</param>
            <param name="comparisonType"><see cref="T:System.StringComparison"/>.</param>
        </member>
        <member name="M:LTest.ExtensionMethods.StringExtensionMethods.Truncate(System.String,System.Int32)">
            <summary>
            Truncates string if too long.
            </summary>
            <param name="value">The string.</param>
            <param name="maxChars">Maximum length.</param>
        </member>
        <member name="T:LTest.TestServerManager">
            <summary>
            Test server manager.
            </summary>
        </member>
        <member name="M:LTest.TestServerManager.GetServer(System.Type)">
            <summary>
            Returns the server for the type.
            </summary>
            <param name="testServerType">Test server type.</param>
        </member>
        <member name="M:LTest.TestServerManager.TryGetDefaultTestServer(System.Reflection.Assembly)">
            <summary>
            Tries to get the default test server using the <see cref="T:LTest.Attributes.DefaultTestServerAttribute"/>.
            </summary>
            <param name="assembly">Assembly to scan.</param>
        </member>
        <member name="T:LTest.Helpers.ServicesHelper">
            <summary>
            Services helper.
            </summary>
        </member>
        <member name="M:LTest.Helpers.ServicesHelper.RunServices``1(System.IServiceProvider)">
            <summary>
            Run services of <see cref="T:LTest.Interfaces.IRunnable"/>.
            </summary>
            <typeparam name="TRunnable"><see cref="T:LTest.Interfaces.IRunnable"/> type.</typeparam>
            <param name="services">Service provider.</param>
        </member>
        <member name="T:LTest.Helpers.StopwatchHelper">
            <summary>
            Stopwatch helper.
            </summary>
        </member>
        <member name="M:LTest.Helpers.StopwatchHelper.MeasureTimeSpan(System.Action)">
            <summary>
            Measures action execution time.
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="M:LTest.Helpers.StopwatchHelper.MeasureTimeSpan``1(System.Func{``0},System.TimeSpan@)">
            <summary>
            Measures action execution time.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="action">Action.</param>
            <param name="elapsed">Elapsed.</param>
            <returns></returns>
        </member>
        <member name="M:LTest.Helpers.StopwatchHelper.MeasureMilliseconds(System.Action)">
            <summary>
            Measures action execution time in milliseconds.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="M:LTest.Helpers.StopwatchHelper.MeasureMilliseconds``1(System.Func{``0},System.Int64@)">
            <summary>
            Measures action execution time in milliseconds.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="action">Action.</param>
            <param name="elapsedMs">Elapsed milliseconds.</param>
        </member>
        <member name="T:LTest.Http.HttpClientAccessor">
            <summary>
            Contains the <see cref="T:System.Net.Http.HttpClient"/> that can be used for integration tests.
            </summary>
        </member>
        <member name="P:LTest.Http.HttpClientAccessor.Client">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/> for integration tests.
            </summary>
        </member>
        <member name="T:LTest.IntegrationTestBase">
            <summary>
            Base class for integration tests.
            </summary>
        </member>
        <member name="M:LTest.IntegrationTestBase.#ctor(LTest.TestServerManager,Xunit.Abstractions.ITestOutputHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.IntegrationTestBase"/> class.
            </summary>
            <param name="serverManager">Test server manager.</param>
            <param name="output"><see cref="T:Xunit.Abstractions.ITestOutputHelper"/> object.</param>
        </member>
        <member name="P:LTest.IntegrationTestBase.Services">
            <summary>
            Access services using this property.
            </summary>
        </member>
        <member name="P:LTest.IntegrationTestBase.TestContext">
            <summary>
            Test context.
            </summary>
        </member>
        <member name="P:LTest.IntegrationTestBase.Logger">
            <summary>
            Test logger.
            </summary>
        </member>
        <member name="M:LTest.IntegrationTestBase.Dispose">
            <summary>
            <see cref="T:System.IDisposable"/> implementation.
            </summary>
        </member>
        <member name="M:LTest.IntegrationTestBase.Dispose(System.Boolean)">
            <summary>
            <see cref="T:System.IDisposable"/> implementation.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="T:LTest.IntegrationTestServiceProvider">
            <summary>
            Service provider extensions for integration tests.
            </summary>
        </member>
        <member name="M:LTest.IntegrationTestServiceProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.IntegrationTestServiceProvider"/> class.
            </summary>
            <param name="services">Service provider</param>
        </member>
        <member name="P:LTest.IntegrationTestServiceProvider.Logger">
            <summary>
            Gets logger service.
            </summary>
        </member>
        <member name="P:LTest.IntegrationTestServiceProvider.LogSniffer">
            <summary>
            Gets log sniffer service.
            </summary>
        </member>
        <member name="P:LTest.IntegrationTestServiceProvider.HttpClient">
            <summary>
            Gets the http client.
            </summary>
        </member>
        <member name="P:LTest.IntegrationTestServiceProvider.Configuration">
            <summary>
            Gets the configuration object.
            </summary>
        </member>
        <member name="M:LTest.IntegrationTestServiceProvider.GetService(System.Type)">
            <summary>
            Returns the service.
            </summary>
            <param name="serviceType">Service type.</param>
        </member>
        <member name="T:LTest.IAfterServerStartedBehavior">
            <summary>
            A service that will be run after server started. Because server instances are cached, it will be called only when a new test server is started.
            </summary>
        </member>
        <member name="T:LTest.IAfterTestBehavior">
            <summary>
            A service that will be run after all tests. The services will be run in the same order as they were registered into DI.
            </summary>
        </member>
        <member name="T:LTest.IBeforeTestBehavior">
            <summary>
            A service that will be run before all tests. The services will be run in the same order as they were registered into DI.
            </summary>
        </member>
        <member name="T:LTest.Interfaces.ICleanSingletonBeforeTest">
            <summary>
            Clear method will be called before test.
            </summary>
        </member>
        <member name="M:LTest.Interfaces.ICleanSingletonBeforeTest.Clear">
            <summary>
            Clean up.
            </summary>
        </member>
        <member name="T:LTest.Interfaces.ILogSnifferService">
            <summary>
            LogSniffer service.
            </summary>
        </member>
        <member name="P:LTest.Interfaces.ILogSnifferService.UnexpectedLogOccured">
            <summary>
            Check whether unexpected log event occured.
            </summary>
        </member>
        <member name="M:LTest.Interfaces.ILogSnifferService.GetSnapshot">
            <summary>
            Returns the actual snapshot of the events.
            </summary>
        </member>
        <member name="M:LTest.Interfaces.ILogSnifferService.AddLogEvent(LTest.LogSniffer.LogSnifferEvent)">
            <summary>
            Saves log event into memory and checks wheter it was unexpected.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:LTest.Interfaces.ILogSnifferService.OverrideIsExpectedLogEventAction(System.Func{LTest.LogSniffer.LogSnifferEvent,System.Boolean})">
            <summary>
            Overrides the is expected event action.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="M:LTest.Interfaces.ILogSnifferService.Reset">
            <summary>
            Cleans the service.
            </summary>
        </member>
        <member name="T:LTest.Interfaces.IRunnable">
            <summary>
            Interface for behaviors.
            </summary>
        </member>
        <member name="M:LTest.Interfaces.IRunnable.RunAsync">
            <summary>
            Behavior logic.
            </summary>
        </member>
        <member name="T:LTest.Interfaces.IServerLogFilter">
            <summary>
            Server log filter.
            </summary>
        </member>
        <member name="M:LTest.Interfaces.IServerLogFilter.Filter(System.String)">
            <summary>
            Whether to log a server log in test output.
            </summary>
            <param name="loggerCategoryName">Logger category name.</param>
        </member>
        <member name="T:LTest.Interfaces.ITestLogger">
            <summary>
            Test logger interface.
            </summary>
        </member>
        <member name="M:LTest.Interfaces.ITestLogger.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:LTest.Interfaces.ITestLogger.Warning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:LTest.Interfaces.ITestLogger.Info(System.String)">
            <summary>
            Logs an information message.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:LTest.Interfaces.ITestLogger.Log(Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:LTest.Interfaces.ITestLogger.Reset">
            <summary>
            Resets the service.
            </summary>
        </member>
        <member name="M:LTest.Interfaces.ITestLogger.Scope(System.Action{LTest.Interfaces.ITestLogger})">
            <summary>
            Creates scope (indenting) in the logger.
            </summary>
        </member>
        <member name="M:LTest.Interfaces.ITestLogger.EmptyLine">
            <summary>
            Writes empty line.
            </summary>
        </member>
        <member name="T:LTest.Interfaces.ITestServer">
            <summary>
            Test server configuration
            </summary>
        </member>
        <member name="M:LTest.Interfaces.ITestServer.EnsureServerStarted">
            <summary>
            Starts the server
            </summary>
        </member>
        <member name="P:LTest.Interfaces.ITestServer.Services">
            <summary>
            Access service provider.
            </summary>
        </member>
        <member name="T:LTest.Logger.LogEvent">
            <summary>
            Log event.
            </summary>
        </member>
        <member name="M:LTest.Logger.LogEvent.#ctor(Microsoft.Extensions.Logging.LogLevel,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.Logger.LogEvent"/> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="scopeLevel">Scope level</param>
            <param name="message">Log message.</param>
        </member>
        <member name="P:LTest.Logger.LogEvent.Level">
            <summary>
            Log level.
            </summary>
        </member>
        <member name="P:LTest.Logger.LogEvent.ScopeLevel">
            <summary>
            Scope level.
            </summary>
        </member>
        <member name="P:LTest.Logger.LogEvent.Message">
            <summary>
            Log message.
            </summary>
        </member>
        <member name="M:LTest.Logger.LogEvent.ToString">
            <summary>
            ToString() override.
            </summary>
        </member>
        <member name="T:LTest.Logger.TestLogger">
            <summary>
            Test logger implementation.
            </summary>
        </member>
        <member name="M:LTest.Logger.TestLogger.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:LTest.Logger.TestLogger.Warning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:LTest.Logger.TestLogger.Info(System.String)">
            <summary>
            Logs an information message.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:LTest.Logger.TestLogger.Log(Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:LTest.Logger.TestLogger.GetSnapshot">
            <summary>
            Retrieves all log events.
            </summary>
        </member>
        <member name="M:LTest.Logger.TestLogger.Reset">
            <summary>
            Resets the service.
            </summary>
        </member>
        <member name="M:LTest.Logger.TestLogger.Scope(System.Action{LTest.Interfaces.ITestLogger})">
            <summary>
            Creates scope (indenting) in the logger.
            </summary>
        </member>
        <member name="M:LTest.Logger.TestLogger.EmptyLine">
            <summary>
            Writes empty line.
            </summary>
        </member>
        <member name="T:LTest.Logger.TestLoggerScope">
            <summary>
            Test logger scope.
            </summary>
        </member>
        <member name="P:LTest.Logger.TestLoggerScope.Level">
            <summary>
            Scope level.
            </summary>
        </member>
        <member name="M:LTest.Logger.TestLoggerScope.#ctor(LTest.Interfaces.ITestLogger,System.Int32,System.Action{LTest.Logger.TestLoggerScope})">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.Logger.TestLoggerScope"/> class.
            </summary>
            <param name="logger">Test logger.</param>
            <param name="level">Scope level</param>
            <param name="finishAction">Finish action.</param>
        </member>
        <member name="M:LTest.Logger.TestLoggerScope.Finish(System.Action{LTest.Interfaces.ITestLogger})">
            <summary>
            Finish action (same as Dispose, but enables logging).
            </summary>
        </member>
        <member name="M:LTest.Logger.TestLoggerScope.Dispose">
            <summary>
            Dispose action.
            </summary>
        </member>
        <member name="T:LTest.LogSniffer.CategoryNameCollector">
            <summary>
            Category name collector.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.CategoryNameCollector.AddCategoryName(System.String)">
            <summary>
            Adds a category name if was not added already.
            </summary>
            <param name="categoryName">Category name.</param>
        </member>
        <member name="P:LTest.LogSniffer.CategoryNameCollector.CategoryNames">
            <summary>
            Returns collected category names.
            </summary>
        </member>
        <member name="T:LTest.LogSniffer.LogSnifferEvent">
            <summary>
            Class for a log event.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferEvent.#ctor(System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.LogSniffer.LogSnifferEvent"/> class.
            </summary>
            <param name="categoryName">Category name.</param>
            <param name="level">Log level.</param>
            <param name="eventId">Event id.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="P:LTest.LogSniffer.LogSnifferEvent.CategoryName">
            <summary>
            Category name.
            </summary>
        </member>
        <member name="P:LTest.LogSniffer.LogSnifferEvent.EventId">
            <summary>
            Event Id.
            </summary>
        </member>
        <member name="P:LTest.LogSniffer.LogSnifferEvent.Level">
            <summary>
            Log level.
            </summary>
        </member>
        <member name="P:LTest.LogSniffer.LogSnifferEvent.Message">
            <summary>
            Log message.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferEvent.ToString">
            <summary>
            ToString() override.
            </summary>
        </member>
        <member name="T:LTest.LogSniffer.LogSnifferLogger">
            <summary>
            Logger for log sniffer.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLogger.#ctor(System.String,LTest.Interfaces.ILogSnifferService,LTest.Configuration.IntegrationTestConfiguration,LTest.Interfaces.ITestLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.LogSniffer.LogSnifferLogger"/> class.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <param name="logSnifferService">LogSniffer service.</param>
            <param name="configuration">Configuration.</param>
            <param name="logger">Logger.</param>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Writes a log entry.
            </summary>
            <typeparam name="TState">The type of the object to be written.</typeparam>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="eventId">Id of the event.</param>
            <param name="state">The entry to be written. Can be also an object.</param>
            <param name="exception">The exception related to this entry.</param>
            <param name="formatter">Function to create a System.String message of the state and exception.</param>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLogger.BeginScope``1(``0)">
            <summary>
            Begins a logical operation scope.
            </summary>
            <typeparam name="TState">The type of the state to begin scope for.</typeparam>
            <param name="state">The identifier for the scope.</param>
            <returns>An System.IDisposable that ends the logical operation scope on dispose.</returns>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Checks if the given <paramref name="logLevel"/> is enabled.
            </summary>
            <param name="logLevel">level to be checked.</param>
            <returns>true if enabled.</returns>
        </member>
        <member name="T:LTest.LogSniffer.LogSnifferLogger.LoggerScope">
            <summary>
            Helper class for BeginScope method.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLogger.LoggerScope.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="T:LTest.LogSniffer.LogSnifferLoggerFactory">
            <summary>
            Logger factory for LogSniffer.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLoggerFactory.#ctor(LTest.Interfaces.ILogSnifferService,LTest.Configuration.IntegrationTestConfiguration,LTest.Interfaces.ITestLogger,LTest.LogSniffer.CategoryNameCollector)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.LogSniffer.LogSnifferLoggerFactory"/> class.
            </summary>
            <param name="logSnifferService">LogSniffer service.</param>
            <param name="configuration">Configuration.</param>
            <param name="logger">Logger.</param>
            <param name="categoryNameCollector">Category name collector.</param>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            Not in use.
            </summary>
            <param name="provider">Logger provider.</param>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates logger for category.
            </summary>
            <param name="categoryName">Category name.</param>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferLoggerFactory.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="T:LTest.LogSniffer.LogSnifferService">
            <summary>
            Log sniffer service implementation.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferService.#ctor(LTest.Interfaces.ITestLogger,LTest.Configuration.IntegrationTestConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.LogSniffer.LogSnifferService"/> class.
            </summary>
            <param name="logger">Logger.</param>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="P:LTest.LogSniffer.LogSnifferService.UnexpectedLogOccured">
            <summary>
            Check whether unexpected log event occured.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferService.OverrideIsExpectedLogEventAction(System.Func{LTest.LogSniffer.LogSnifferEvent,System.Boolean})">
            <summary>
            Overrides the is expected event action. It lasts only for the actual test.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferService.AddLogEvent(LTest.LogSniffer.LogSnifferEvent)">
            <summary>
            Saves log event into memory and checks whether it was unexpected.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferService.GetSnapshot">
            <summary>
            Returns the actual snapshot of the events.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.LogSnifferService.Reset">
            <summary>
            Resets the service.
            </summary>
        </member>
        <member name="T:LTest.LogSniffer.ResetExpectedLogEventAction">
            <summary>
            Helper class to reset LogSniffer expected log event action.
            </summary>
        </member>
        <member name="M:LTest.LogSniffer.ResetExpectedLogEventAction.#ctor(LTest.LogSniffer.LogSnifferService)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.LogSniffer.ResetExpectedLogEventAction"/> class.
            </summary>
            <param name="logSnifferService">LogSniffer service</param>
        </member>
        <member name="M:LTest.LogSniffer.ResetExpectedLogEventAction.Dispose">
            <summary>
            Resets LogSniffer.
            </summary>
        </member>
        <member name="T:LTest.Mocks.DefaultMessageHandler`1">
            <summary>
            Default message handler.
            </summary>
        </member>
        <member name="M:LTest.Mocks.DefaultMessageHandler`1.#ctor(LTest.Mocks.ResponseCache.ResponseCacheService{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.Mocks.ResponseCache.ResponseCacheService`1"/> class.
            </summary>
            <param name="reponseCache"></param>
        </member>
        <member name="M:LTest.Mocks.DefaultMessageHandler`1.AddMissingResponse(System.Net.Http.HttpRequestMessage)">
            <summary>
            Runs when respose of the request is missing. By default request is sent by HttpClient.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:LTest.Mocks.DefaultMessageHandler`1.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Send request override.
            </summary>
            <param name="request">Request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:LTest.Mocks.DefaultMessageHandler`1.SerializeRequestForHash(LTest.Mocks.ResponseCache.Request)">
            <summary>
            Serializes request for hashing. By default Method, Uri and Content are serialized. Headers are not.
            </summary>
            <param name="request">Request.</param>
        </member>
        <member name="M:LTest.Mocks.DefaultMessageHandler`1.SeriliazeContent(System.Net.Http.HttpContent)">
            <summary>
            Serializes http content.
            </summary>
            <param name="content">Content.</param>
        </member>
        <member name="M:LTest.Mocks.DefaultMessageHandler`1.DeserializeContent(LTest.Mocks.ResponseCache.Content)">
            <summary>
            Deserialize content.
            </summary>
            <param name="content">Content.</param>
        </member>
        <member name="M:LTest.Mocks.DefaultMessageHandler`1.CreateResponseObject(System.Net.Http.HttpResponseMessage)">
            <summary>
            Creates response object from HttpResponseMessage.
            </summary>
            <param name="response">Response.</param>
        </member>
        <member name="M:LTest.Mocks.DefaultMessageHandler`1.CreateRequestObject(System.Net.Http.HttpRequestMessage)">
            <summary>
            Creates request object from HttpRequestMessage.
            </summary>
            <param name="request">Request.</param>
            <returns></returns>
        </member>
        <member name="T:LTest.Mocks.MockSender`1">
            <summary>
            Mock sender.
            </summary>
            <typeparam name="T">Model to store.</typeparam>
        </member>
        <member name="F:LTest.Mocks.MockSender`1.Messages">
            <summary>
            Sent messages;
            </summary>
        </member>
        <member name="P:LTest.Mocks.MockSender`1.SentMessages">
            <summary>
            Access sent messages.
            </summary>
        </member>
        <member name="M:LTest.Mocks.MockSender`1.Clear">
            <summary>
            Clear sent messages;
            </summary>
        </member>
        <member name="T:LTest.Mocks.ResponseCache.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Content.Type">
            <summary>
            Serialized type.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Content.Headers">
            <summary>
            Headers.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Content.Data">
            <summary>
            Serilaized data.
            </summary>
        </member>
        <member name="T:LTest.Mocks.ResponseCache.Data">
            <summary>
            Data stored in cache.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Data.Request">
            <summary>
            Serialized request.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Data.Response">
            <summary>
            Response.
            </summary>
        </member>
        <member name="T:LTest.Mocks.ResponseCache.Request">
            <summary>
            Request object.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Request.Method">
            <summary>
            Method.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Request.Uri">
            <summary>
            Uri.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Request.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Request.Headers">
            <summary>
            Headers.
            </summary>
        </member>
        <member name="T:LTest.Mocks.ResponseCache.Response">
            <summary>
            Response object.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Response.StatusCode">
            <summary>
            Status code.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Response.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Response.Headers">
            <summary>
            Headers.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Response.TrailingHeaders">
            <summary>
            Trailing headers.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Response.ReasonPhrase">
            <summary>
            Reason phrase.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.Response.Version">
            <summary>
            Serialized version.
            </summary>
        </member>
        <member name="T:LTest.Mocks.ResponseCache.ResponseCacheService`1">
            <summary>
            Response cache.
            </summary>
        </member>
        <member name="M:LTest.Mocks.ResponseCache.ResponseCacheService`1.#ctor(LTest.Interfaces.ITestLogger,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.Mocks.ResponseCache.ResponseCacheService`1"/> class.
            </summary>
            <param name="logger">Logger.</param>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:LTest.Mocks.ResponseCache.ResponseCacheService`1.GetOrAdd(System.String,LTest.Mocks.ResponseCache.Request,System.Func{LTest.Mocks.ResponseCache.Response})">
            <summary>
            Returns the response from cache or adds it to the cache.
            </summary>
            <param name="key">Key.</param>
            <param name="request">Request.</param>
            <param name="addAction">Add action.</param>
        </member>
        <member name="T:LTest.Mocks.ResponseCache.ResponseCacheSettings">
            <summary>
            Response cache settings.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.ResponseCacheSettings.ResponseCacheDir">
            <summary>
            Response cache directory. Use {outputdir} to specify the output (bin) directory of the integration test project.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.ResponseCacheSettings.EnableAddingRequest">
            <summary>
            Whether to enable adding request to the cache.
            </summary>
        </member>
        <member name="P:LTest.Mocks.ResponseCache.ResponseCacheSettings.EnableGeneratingResponse">
            <summary>
            Whether to enable generating response for the request.
            </summary>
        </member>
        <member name="T:LTest.Models.ServerDetails">
            <summary>
            Server details.
            </summary>
        </member>
        <member name="M:LTest.Models.ServerDetails.#ctor(LTest.Interfaces.ITestServer)">
            <summary>
            Initializes a new instance of the <see cref="T:LTest.Models.ServerDetails"/> class.
            </summary>
            <param name="testServer">Test server</param>
        </member>
        <member name="P:LTest.Models.ServerDetails.Services">
            <summary>
            Access services using this property.
            </summary>
        </member>
        <member name="M:LTest.Models.ServerDetails.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:LTest.TestServerBase`1">
            <summary>
            WebApplication factory base class for integration tests.
            </summary>
            <typeparam name="TStartup">Startup class.</typeparam>
        </member>
        <member name="M:LTest.TestServerBase`1.EnsureServerStarted">
            <summary>
            Ensures that the server is running.
            </summary>
        </member>
        <member name="M:LTest.TestServerBase`1.ConfigureTestServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure test services in this method.
            </summary>
            <param name="services">Service collection.</param>
        </member>
        <member name="M:LTest.TestServerBase`1.Configure(LTest.Configuration.IntegrationTestConfiguration)">
            <summary>
            Configure parameters here.
            </summary>
            <param name="config">Configuration.</param>
        </member>
        <member name="M:LTest.TestServerBase`1.ConfigureWebHost(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            ConfigureWebHost.
            </summary>
            <param name="builder">IWebHostBuilder.</param>
        </member>
        <member name="M:LTest.TestServerBase`1.CreateHostBuilder">
            <summary>
            Creates the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>.
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpRequestMessageExtensionMethods">
            <summary>
            Http request message extensions.
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpRequestMessageExtensionMethods.ToCurl(System.Net.Http.HttpRequestMessage)">
            <summary>
            Generates curl from http request message.
            </summary>
            <param name="request">Request.</param>
        </member>
    </members>
</doc>
